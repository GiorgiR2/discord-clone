{"ast":null,"code":"import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nexport class Transport extends Emitter {\n  /**\n   * Transport abstract constructor.\n   *\n   * @param {Object} options.\n   * @api private\n   */\n  constructor(opts) {\n    super();\n    this.writable = false;\n    installTimerFunctions(this, opts);\n    this.opts = opts;\n    this.query = opts.query;\n    this.readyState = \"\";\n    this.socket = opts.socket;\n  }\n  /**\n   * Emits an error.\n   *\n   * @param {String} str\n   * @return {Transport} for chaining\n   * @api protected\n   */\n\n\n  onError(msg, desc) {\n    const err = new Error(msg); // @ts-ignore\n\n    err.type = \"TransportError\"; // @ts-ignore\n\n    err.description = desc;\n    super.emit(\"error\", err);\n    return this;\n  }\n  /**\n   * Opens the transport.\n   *\n   * @api public\n   */\n\n\n  open() {\n    if (\"closed\" === this.readyState || \"\" === this.readyState) {\n      this.readyState = \"opening\";\n      this.doOpen();\n    }\n\n    return this;\n  }\n  /**\n   * Closes the transport.\n   *\n   * @api public\n   */\n\n\n  close() {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.doClose();\n      this.onClose();\n    }\n\n    return this;\n  }\n  /**\n   * Sends multiple packets.\n   *\n   * @param {Array} packets\n   * @api public\n   */\n\n\n  send(packets) {\n    if (\"open\" === this.readyState) {\n      this.write(packets);\n    } else {// this might happen if the transport was silently closed in the beforeunload event handler\n    }\n  }\n  /**\n   * Called upon open\n   *\n   * @api protected\n   */\n\n\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    super.emit(\"open\");\n  }\n  /**\n   * Called with data.\n   *\n   * @param {String} data\n   * @api protected\n   */\n\n\n  onData(data) {\n    const packet = decodePacket(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n  /**\n   * Called with a decoded packet.\n   *\n   * @api protected\n   */\n\n\n  onPacket(packet) {\n    super.emit(\"packet\", packet);\n  }\n  /**\n   * Called upon close.\n   *\n   * @api protected\n   */\n\n\n  onClose() {\n    this.readyState = \"closed\";\n    super.emit(\"close\");\n  }\n\n}","map":{"version":3,"sources":["/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/engine.io-client/build/esm/transport.js"],"names":["decodePacket","Emitter","installTimerFunctions","Transport","constructor","opts","writable","query","readyState","socket","onError","msg","desc","err","Error","type","description","emit","open","doOpen","close","doClose","onClose","send","packets","write","onOpen","onData","data","packet","binaryType","onPacket"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,SAASC,qBAAT,QAAsC,WAAtC;AACA,OAAO,MAAMC,SAAN,SAAwBF,OAAxB,CAAgC;AACnC;AACJ;AACA;AACA;AACA;AACA;AACIG,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACAJ,IAAAA,qBAAqB,CAAC,IAAD,EAAOG,IAAP,CAArB;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKE,KAAL,GAAaF,IAAI,CAACE,KAAlB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,MAAL,GAAcJ,IAAI,CAACI,MAAnB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,GAAD,EAAMC,IAAN,EAAY;AACf,UAAMC,GAAG,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAAZ,CADe,CAEf;;AACAE,IAAAA,GAAG,CAACE,IAAJ,GAAW,gBAAX,CAHe,CAIf;;AACAF,IAAAA,GAAG,CAACG,WAAJ,GAAkBJ,IAAlB;AACA,UAAMK,IAAN,CAAW,OAAX,EAAoBJ,GAApB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIK,EAAAA,IAAI,GAAG;AACH,QAAI,aAAa,KAAKV,UAAlB,IAAgC,OAAO,KAAKA,UAAhD,EAA4D;AACxD,WAAKA,UAAL,GAAkB,SAAlB;AACA,WAAKW,MAAL;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,KAAK,GAAG;AACJ,QAAI,cAAc,KAAKZ,UAAnB,IAAiC,WAAW,KAAKA,UAArD,EAAiE;AAC7D,WAAKa,OAAL;AACA,WAAKC,OAAL;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,IAAI,CAACC,OAAD,EAAU;AACV,QAAI,WAAW,KAAKhB,UAApB,EAAgC;AAC5B,WAAKiB,KAAL,CAAWD,OAAX;AACH,KAFD,MAGK,CACD;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,MAAM,GAAG;AACL,SAAKlB,UAAL,GAAkB,MAAlB;AACA,SAAKF,QAAL,GAAgB,IAAhB;AACA,UAAMW,IAAN,CAAW,MAAX;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIU,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,UAAMC,MAAM,GAAG7B,YAAY,CAAC4B,IAAD,EAAO,KAAKnB,MAAL,CAAYqB,UAAnB,CAA3B;AACA,SAAKC,QAAL,CAAcF,MAAd;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,QAAQ,CAACF,MAAD,EAAS;AACb,UAAMZ,IAAN,CAAW,QAAX,EAAqBY,MAArB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIP,EAAAA,OAAO,GAAG;AACN,SAAKd,UAAL,GAAkB,QAAlB;AACA,UAAMS,IAAN,CAAW,OAAX;AACH;;AA1GkC","sourcesContent":["import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} options.\n     * @api private\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.readyState = \"\";\n        this.socket = opts.socket;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} str\n     * @return {Transport} for chaining\n     * @api protected\n     */\n    onError(msg, desc) {\n        const err = new Error(msg);\n        // @ts-ignore\n        err.type = \"TransportError\";\n        // @ts-ignore\n        err.description = desc;\n        super.emit(\"error\", err);\n        return this;\n    }\n    /**\n     * Opens the transport.\n     *\n     * @api public\n     */\n    open() {\n        if (\"closed\" === this.readyState || \"\" === this.readyState) {\n            this.readyState = \"opening\";\n            this.doOpen();\n        }\n        return this;\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api public\n     */\n    close() {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     * @api public\n     */\n    send(packets) {\n        if (\"open\" === this.readyState) {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @api protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emit(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @api protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @api protected\n     */\n    onPacket(packet) {\n        super.emit(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @api protected\n     */\n    onClose() {\n        this.readyState = \"closed\";\n        super.emit(\"close\");\n    }\n}\n"]},"metadata":{},"sourceType":"module"}