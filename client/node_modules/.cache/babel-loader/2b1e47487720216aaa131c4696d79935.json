{"ast":null,"code":"import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\n\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nexport class Socket extends Emitter {\n  /**\n   * `Socket` constructor.\n   *\n   * @public\n   */\n  constructor(io, nsp, opts) {\n    super();\n    this.connected = false;\n    this.disconnected = true;\n    this.receiveBuffer = [];\n    this.sendBuffer = [];\n    this.ids = 0;\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n\n    if (this.io._autoConnect) this.open();\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n\n\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects\n   */\n\n\n  get active() {\n    return !!this.subs;\n  }\n  /**\n   * \"Opens\" the socket.\n   *\n   * @public\n   */\n\n\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\n   * Alias for connect()\n   */\n\n\n  open() {\n    return this.connect();\n  }\n  /**\n   * Sends a `message` event.\n   *\n   * @return self\n   * @public\n   */\n\n\n  send() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\n   * Override `emit`.\n   * If the event is in `events`, it's emitted normally.\n   *\n   * @return self\n   * @public\n   */\n\n\n  emit(ev) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev + '\" is a reserved event name');\n    }\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    args.unshift(ev);\n    const packet = {\n      type: PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false; // event ack callback\n\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      const ack = args.pop();\n\n      this._registerAckCallback(id, ack);\n\n      packet.id = id;\n    }\n\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n    if (discardPacket) {} else if (this.connected) {\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n\n    this.flags = {};\n    return this;\n  }\n  /**\n   * @private\n   */\n\n\n  _registerAckCallback(id, ack) {\n    var _this = this;\n\n    const timeout = this.flags.timeout;\n\n    if (timeout === undefined) {\n      this.acks[id] = ack;\n      return;\n    } // @ts-ignore\n\n\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n\n    this.acks[id] = function () {\n      // @ts-ignore\n      _this.io.clearTimeoutFn(timer);\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      ack.apply(_this, [null, ...args]);\n    };\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param packet\n   * @private\n   */\n\n\n  packet(packet) {\n    packet.nsp = this.nsp;\n\n    this.io._packet(packet);\n  }\n  /**\n   * Called upon engine `open`.\n   *\n   * @private\n   */\n\n\n  onopen() {\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this.packet({\n          type: PacketType.CONNECT,\n          data\n        });\n      });\n    } else {\n      this.packet({\n        type: PacketType.CONNECT,\n        data: this.auth\n      });\n    }\n  }\n  /**\n   * Called upon engine or manager `error`.\n   *\n   * @param err\n   * @private\n   */\n\n\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\n   * Called upon engine `close`.\n   *\n   * @param reason\n   * @private\n   */\n\n\n  onclose(reason) {\n    this.connected = false;\n    this.disconnected = true;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason);\n  }\n  /**\n   * Called with socket packet.\n   *\n   * @param packet\n   * @private\n   */\n\n\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n\n    switch (packet.type) {\n      case PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          const id = packet.data.sid;\n          this.onconnect(id);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n\n        break;\n\n      case PacketType.EVENT:\n        this.onevent(packet);\n        break;\n\n      case PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n\n      case PacketType.ACK:\n        this.onack(packet);\n        break;\n\n      case PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n\n      case PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n\n      case PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message); // @ts-ignore\n\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\n   * Called upon a server event.\n   *\n   * @param packet\n   * @private\n   */\n\n\n  onevent(packet) {\n    const args = packet.data || [];\n\n    if (null != packet.id) {\n      args.push(this.ack(packet.id));\n    }\n\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n\n    super.emit.apply(this, args);\n  }\n  /**\n   * Produces an ack callback to emit with an event.\n   *\n   * @private\n   */\n\n\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function () {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      self.packet({\n        type: PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\n   * Called upon a server acknowlegement.\n   *\n   * @param packet\n   * @private\n   */\n\n\n  onack(packet) {\n    const ack = this.acks[packet.id];\n\n    if (\"function\" === typeof ack) {\n      ack.apply(this, packet.data);\n      delete this.acks[packet.id];\n    } else {}\n  }\n  /**\n   * Called upon server connect.\n   *\n   * @private\n   */\n\n\n  onconnect(id) {\n    this.id = id;\n    this.connected = true;\n    this.disconnected = false;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n  }\n  /**\n   * Emit buffered events (received and emitted).\n   *\n   * @private\n   */\n\n\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => this.packet(packet));\n    this.sendBuffer = [];\n  }\n  /**\n   * Called upon server disconnect.\n   *\n   * @private\n   */\n\n\n  ondisconnect() {\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\n   * Called upon forced client/server side disconnections,\n   * this method ensures the manager stops tracking us and\n   * that reconnections don't get triggered for this.\n   *\n   * @private\n   */\n\n\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n\n    this.io[\"_destroy\"](this);\n  }\n  /**\n   * Disconnects the socket manually.\n   *\n   * @return self\n   * @public\n   */\n\n\n  disconnect() {\n    if (this.connected) {\n      this.packet({\n        type: PacketType.DISCONNECT\n      });\n    } // remove socket from pool\n\n\n    this.destroy();\n\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n\n    return this;\n  }\n  /**\n   * Alias for disconnect()\n   *\n   * @return self\n   * @public\n   */\n\n\n  close() {\n    return this.disconnect();\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return self\n   * @public\n   */\n\n\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n   * ready to send messages.\n   *\n   * @returns self\n   * @public\n   */\n\n\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n   * given number of milliseconds have elapsed without an acknowledgement from the server:\n   *\n   * ```\n   * socket.timeout(5000).emit(\"my-event\", (err) => {\n   *   if (err) {\n   *     // the server did not acknowledge the event in the given delay\n   *   }\n   * });\n   * ```\n   *\n   * @returns self\n   * @public\n   */\n\n\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * @param listener\n   * @public\n   */\n\n\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.push(listener);\n\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * @param listener\n   * @public\n   */\n\n\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.unshift(listener);\n\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @param listener\n   * @public\n   */\n\n\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n\n    if (listener) {\n      const listeners = this._anyListeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   *\n   * @public\n   */\n\n\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n\n}","map":{"version":3,"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","constructor","io","nsp","opts","connected","disconnected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","subEvents","subs","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","volatile","push","timeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","_packet","CONNECT","err","emitReserved","reason","sameNamespace","sid","onconnect","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","close","onAny","prependAny","offAny","listenersAny"],"sources":["/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/socket.io-client/build/esm/socket.js"],"sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.connected = false;\n        this.disconnected = true;\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    onclose(reason) {\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n                this.onack(packet);\n                break;\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => this.packet(packet));\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}