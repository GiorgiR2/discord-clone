{"ast":null,"code":"import _classCallCheck from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { transports } from \"./transports/index.js\";\nimport { installTimerFunctions } from \"./util.js\";\nimport parseqs from \"parseqs\";\nimport parseuri from \"parseuri\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} opts - options\n   * @api public\n   */\n  function Socket(uri) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n\n    installTimerFunctions(_assertThisInitialized(_this), opts);\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? \"443\" : \"80\");\n    _this.transports = opts.transports || [\"polling\", \"websocket\"];\n    _this.readyState = \"\";\n    _this.writeBuffer = [];\n    _this.prevBufferLen = 0;\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: true\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = parseqs.decode(_this.opts.query);\n    } // set on handshake\n\n\n    _this.id = null;\n    _this.upgrades = null;\n    _this.pingInterval = null;\n    _this.pingTimeout = null; // set on heartbeat\n\n    _this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      if (_this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        addEventListener(\"beforeunload\", function () {\n          if (_this.transport) {\n            // silently close the transport\n            _this.transport.removeAllListeners();\n\n            _this.transport.close();\n          }\n        }, false);\n      }\n\n      if (_this.hostname !== \"localhost\") {\n        _this.offlineEventListener = function () {\n          _this.onClose(\"transport close\");\n        };\n\n        addEventListener(\"offline\", _this.offlineEventListener, false);\n      }\n    }\n\n    _this.open();\n\n    return _this;\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n\n\n  _createClass(Socket, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      var query = clone(this.opts.query); // append engine.io protocol identifier\n\n      query.EIO = protocol; // transport name\n\n      query.transport = name; // session id if we already have one\n\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      });\n      return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this2 = this;\n\n      var transport;\n\n      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n        transport = \"websocket\";\n      } else if (0 === this.transports.length) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(function () {\n          _this2.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      } else {\n        transport = this.transports[0];\n      }\n\n      this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n      try {\n        transport = this.createTransport(transport);\n      } catch (e) {\n        this.transports.shift();\n        this.open();\n        return;\n      }\n\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      var _this3 = this;\n\n      if (this.transport) {\n        this.transport.removeAllListeners();\n      } // set up transport\n\n\n      this.transport = transport; // set up transport listeners\n\n      transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", function () {\n        _this3.onClose(\"transport close\");\n      });\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n\n  }, {\n    key: \"probe\",\n    value: function probe(name) {\n      var _this4 = this;\n\n      var transport = this.createTransport(name);\n      var failed = false;\n      Socket.priorWebsocketSuccess = false;\n\n      var onTransportOpen = function onTransportOpen() {\n        if (failed) return;\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            _this4.upgrading = true;\n\n            _this4.emitReserved(\"upgrading\", transport);\n\n            if (!transport) return;\n            Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n\n            _this4.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === _this4.readyState) return;\n              cleanup();\n\n              _this4.setTransport(transport);\n\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n\n              _this4.emitReserved(\"upgrade\", transport);\n\n              transport = null;\n              _this4.upgrading = false;\n\n              _this4.flush();\n            });\n          } else {\n            var err = new Error(\"probe error\"); // @ts-ignore\n\n            err.transport = transport.name;\n\n            _this4.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n\n      function freezeTransport() {\n        if (failed) return; // Any callback called by transport should be ignored since now\n\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      } // Handle any error that happens while probing\n\n\n      var onerror = function onerror(err) {\n        var error = new Error(\"probe error: \" + err); // @ts-ignore\n\n        error.transport = transport.name;\n        freezeTransport();\n\n        _this4.emitReserved(\"upgradeError\", error);\n      };\n\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      } // When the socket is closed while we're probing\n\n\n      function onclose() {\n        onerror(\"socket closed\");\n      } // When the socket is upgraded while we're probing\n\n\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          freezeTransport();\n        }\n      } // Remove all listeners on the transport and on self\n\n\n      var cleanup = function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n\n        _this4.off(\"close\", onclose);\n\n        _this4.off(\"upgrading\", onupgrade);\n      };\n\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      this.readyState = \"open\";\n      Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush(); // we check for `readyState` in case an `open`\n      // listener already closed the socket\n\n      if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n        var i = 0;\n        var l = this.upgrades.length;\n\n        for (; i < l; i++) {\n          this.probe(this.upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        this.emitReserved(\"packet\", packet); // Socket is live - any packet counts\n\n        this.emitReserved(\"heartbeat\");\n\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n\n          case \"ping\":\n            this.resetPingTimeout();\n            this.sendPacket(\"pong\");\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n            break;\n\n          case \"error\":\n            var err = new Error(\"server error\"); // @ts-ignore\n\n            err.code = packet.data;\n            this.onError(err);\n            break;\n\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      } else {}\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this.upgrades = this.filterUpgrades(data.upgrades);\n      this.pingInterval = data.pingInterval;\n      this.pingTimeout = data.pingTimeout;\n      this.onOpen(); // In case open handler closes socket\n\n      if (\"closed\" === this.readyState) return;\n      this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"resetPingTimeout\",\n    value: function resetPingTimeout() {\n      var _this5 = this;\n\n      this.clearTimeoutFn(this.pingTimeoutTimer);\n      this.pingTimeoutTimer = this.setTimeoutFn(function () {\n        _this5.onClose(\"ping timeout\");\n      }, this.pingInterval + this.pingTimeout);\n\n      if (this.opts.autoUnref) {\n        this.pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onDrain\",\n    value: function onDrain() {\n      this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n\n      this.prevBufferLen = 0;\n\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n\n        this.prevBufferLen = this.writeBuffer.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n\n  }, {\n    key: \"sendPacket\",\n    value: function sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this6 = this;\n\n      var close = function close() {\n        _this6.onClose(\"forced close\");\n\n        _this6.transport.close();\n      };\n\n      var cleanupAndClose = function cleanupAndClose() {\n        _this6.off(\"upgrade\", cleanupAndClose);\n\n        _this6.off(\"upgradeError\", cleanupAndClose);\n\n        close();\n      };\n\n      var waitForUpgrade = function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        _this6.once(\"upgrade\", cleanupAndClose);\n\n        _this6.once(\"upgradeError\", cleanupAndClose);\n      };\n\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (_this6.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      Socket.priorWebsocketSuccess = false;\n      this.emitReserved(\"error\", err);\n      this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(reason, desc) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        // clear timers\n        this.clearTimeoutFn(this.pingTimeoutTimer); // stop event from firing again for transport\n\n        this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n        this.transport.close(); // ignore further transport communication\n\n        this.transport.removeAllListeners();\n\n        if (typeof removeEventListener === \"function\") {\n          removeEventListener(\"offline\", this.offlineEventListener, false);\n        } // set ready state\n\n\n        this.readyState = \"closed\"; // clear session id\n\n        this.id = null; // emit close event\n\n        this.emitReserved(\"close\", reason, desc); // clean buffers after, so users can still\n        // grab the buffers on `close` event\n\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n      }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n\n  }, {\n    key: \"filterUpgrades\",\n    value: function filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      var i = 0;\n      var j = upgrades.length;\n\n      for (; i < j; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n\n      return filteredUpgrades;\n    }\n  }]);\n\n  return Socket;\n}(Emitter);\nSocket.protocol = protocol;\n\nfunction clone(obj) {\n  var o = {};\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n\n  return o;\n}","map":{"version":3,"names":["transports","installTimerFunctions","parseqs","parseuri","Emitter","protocol","Socket","uri","opts","hostname","host","secure","port","query","location","readyState","writeBuffer","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","open","name","clone","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeoutFn","emitReserved","createTransport","e","shift","setTransport","on","onDrain","bind","onPacket","onError","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","off","i","l","probe","packet","onHandshake","JSON","parse","resetPingTimeout","sendPacket","code","filterUpgrades","onOpen","clearTimeoutFn","autoUnref","unref","splice","writable","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","reason","desc","removeEventListener","filteredUpgrades","j","obj","o","hasOwnProperty"],"sources":["/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/engine.io-client/build/esm/socket.js"],"sourcesContent":["import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions } from \"./util.js\";\nimport parseqs from \"parseqs\";\nimport parseuri from \"parseuri\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nexport class Socket extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri or options\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(uri, opts = {}) {\n        super();\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = parseuri(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parseuri(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\n        this.readyState = \"\";\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024\n            },\n            transportOptions: {},\n            closeOnBeforeunload: true\n        }, opts);\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = parseqs.decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                addEventListener(\"beforeunload\", () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                }, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\");\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} transport name\n     * @return {Transport}\n     * @api private\n     */\n    createTransport(name) {\n        const query = clone(this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port\n        });\n        return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", () => {\n            this.onClose(\"transport close\");\n        });\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n    probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", msg => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = err => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState &&\n            this.opts.upgrade &&\n            this.transport.pause) {\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            this.transport.send(this.writeBuffer);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = this.writeBuffer.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n    onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n    onClose(reason, desc) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, desc);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nSocket.protocol = protocol;\nfunction clone(obj) {\n    const o = {};\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            o[i] = obj[i];\n        }\n    }\n    return o;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}