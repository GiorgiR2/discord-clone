{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\n\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * `Socket` constructor.\n   *\n   * @public\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    _this.connected = false;\n    _this.disconnected = true;\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n\n\n  _createClass(Socket, [{\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for connect()\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev + '\" is a reserved event name');\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      args.unshift(ev);\n      var packet = {\n        type: PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false; // event ack callback\n\n      if (\"function\" === typeof args[args.length - 1]) {\n        var id = this.ids++;\n        var ack = args.pop();\n\n        this._registerAckCallback(id, ack);\n\n        packet.id = id;\n      }\n\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n      if (discardPacket) {} else if (this.connected) {\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_registerAckCallback\",\n    value: function _registerAckCallback(id, ack) {\n      var _this2 = this;\n\n      var timeout = this.flags.timeout;\n\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      } // @ts-ignore\n\n\n      var timer = this.io.setTimeoutFn(function () {\n        delete _this2.acks[id];\n\n        for (var i = 0; i < _this2.sendBuffer.length; i++) {\n          if (_this2.sendBuffer[i].id === id) {\n            _this2.sendBuffer.splice(i, 1);\n          }\n        }\n\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n\n      this.acks[id] = function () {\n        // @ts-ignore\n        _this2.io.clearTimeoutFn(timer);\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        ack.apply(_this2, [null].concat(args));\n      };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this3 = this;\n\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this3.packet({\n            type: PacketType.CONNECT,\n            data: data\n          });\n        });\n      } else {\n        this.packet({\n          type: PacketType.CONNECT,\n          data: this.auth\n        });\n      }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason) {\n      this.connected = false;\n      this.disconnected = true;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n\n      switch (packet.type) {\n        case PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            var id = packet.data.sid;\n            this.onconnect(id);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n\n          break;\n\n        case PacketType.EVENT:\n          this.onevent(packet);\n          break;\n\n        case PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case PacketType.ACK:\n          this.onack(packet);\n          break;\n\n        case PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n\n        case PacketType.CONNECT_ERROR:\n          this.destroy();\n          var err = new Error(packet.data.message); // @ts-ignore\n\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n\n      if (null != packet.id) {\n        args.push(this.ack(packet.id));\n      }\n\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n\n        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        self.packet({\n          type: PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n\n      if (\"function\" === typeof ack) {\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {}\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id) {\n      this.id = id;\n      this.connected = true;\n      this.disconnected = false;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this4 = this;\n\n      this.receiveBuffer.forEach(function (args) {\n        return _this4.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        return _this4.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        this.packet({\n          type: PacketType.DISCONNECT\n        });\n      } // remove socket from pool\n\n\n      this.destroy();\n\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n\n      return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n\n  }, {\n    key: \"timeout\",\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n  }]);\n\n  return Socket;\n}(Emitter);","map":{"version":3,"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","io","nsp","opts","connected","disconnected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","subs","onopen","bind","onpacket","onerror","onclose","subEvents","_readyState","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","volatile","push","timeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","_packet","CONNECT","err","emitReserved","reason","sameNamespace","sid","onconnect","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy"],"sources":["/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/socket.io-client/build/esm/socket.js"],"sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.connected = false;\n        this.disconnected = true;\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    onclose(reason) {\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n                this.onack(packet);\n                break;\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => this.packet(packet));\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}