{"ast":null,"code":"import _classCallCheck from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Transport } from \"../transport.js\";\nimport yeast from \"yeast\";\nimport parseqs from \"parseqs\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport var Polling = /*#__PURE__*/function (_Transport) {\n  _inherits(Polling, _Transport);\n\n  var _super = _createSuper(Polling);\n\n  function Polling() {\n    var _this;\n\n    _classCallCheck(this, Polling);\n\n    _this = _super.apply(this, arguments);\n    _this.polling = false;\n    return _this;\n  }\n  /**\n   * Transport name.\n   */\n\n\n  _createClass(Polling, [{\n    key: \"name\",\n    get: function get() {\n      return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doOpen\",\n    value: function doOpen() {\n      this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause(onPause) {\n      var _this2 = this;\n\n      this.readyState = \"pausing\";\n\n      var pause = function pause() {\n        _this2.readyState = \"paused\";\n        onPause();\n      };\n\n      if (this.polling || !this.writable) {\n        var total = 0;\n\n        if (this.polling) {\n          total++;\n          this.once(\"pollComplete\", function () {\n            --total || pause();\n          });\n        }\n\n        if (!this.writable) {\n          total++;\n          this.once(\"drain\", function () {\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      this.polling = true;\n      this.doPoll();\n      this.emit(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var _this3 = this;\n\n      var callback = function callback(packet) {\n        // if its the first message we consider the transport open\n        if (\"opening\" === _this3.readyState && packet.type === \"open\") {\n          _this3.onOpen();\n        } // if its a close packet, we close the ongoing requests\n\n\n        if (\"close\" === packet.type) {\n          _this3.onClose();\n\n          return false;\n        } // otherwise bypass onData and handle the message\n\n\n        _this3.onPacket(packet);\n      }; // decode payload\n\n\n      decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this.polling = false;\n        this.emit(\"pollComplete\");\n\n        if (\"open\" === this.readyState) {\n          this.poll();\n        } else {}\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      var _this4 = this;\n\n      var close = function close() {\n        _this4.write([{\n          type: \"close\"\n        }]);\n      };\n\n      if (\"open\" === this.readyState) {\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this5 = this;\n\n      this.writable = false;\n      encodePayload(packets, function (data) {\n        _this5.doWrite(data, function () {\n          _this5.writable = true;\n\n          _this5.emit(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var query = this.query || {};\n      var schema = this.opts.secure ? \"https\" : \"http\";\n      var port = \"\"; // cache busting is forced\n\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = yeast();\n      }\n\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      } // avoid port if default for schema\n\n\n      if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n        port = \":\" + this.opts.port;\n      }\n\n      var encodedQuery = parseqs.encode(query);\n      var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n      return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n    }\n  }]);\n\n  return Polling;\n}(Transport);","map":{"version":3,"names":["Transport","yeast","parseqs","encodePayload","decodePayload","Polling","arguments","polling","poll","onPause","readyState","pause","writable","total","once","doPoll","emit","data","callback","packet","type","onOpen","onClose","onPacket","socket","binaryType","forEach","close","write","packets","doWrite","query","schema","opts","secure","port","timestampRequests","timestampParam","supportsBinary","sid","b64","Number","encodedQuery","encode","ipv6","hostname","indexOf","path","length"],"sources":["/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/engine.io-client/build/esm/transports/polling.js"],"sourcesContent":["import { Transport } from \"../transport.js\";\nimport yeast from \"yeast\";\nimport parseqs from \"parseqs\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n    constructor() {\n        super(...arguments);\n        this.polling = false;\n    }\n    /**\n     * Transport name.\n     */\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n    doOpen() {\n        this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this.polling || !this.writable) {\n            let total = 0;\n            if (this.polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n    poll() {\n        this.polling = true;\n        this.doPoll();\n        this.emit(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n    onData(data) {\n        const callback = packet => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose();\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this.polling = false;\n            this.emit(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this.poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, data => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emit(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        let port = \"\";\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        const encodedQuery = parseqs.encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}