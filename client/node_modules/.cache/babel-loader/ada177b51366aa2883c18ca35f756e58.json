{"ast":null,"code":"import _get from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * Protocol version.\n *\n * @public\n */\n\nexport var protocol = 5;\nexport var PacketType;\n\n(function (PacketType) {\n  PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n  PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n  PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n  PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n  PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n  PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\n\n\nexport var Encoder = /*#__PURE__*/function () {\n  function Encoder() {\n    _classCallCheck(this, Encoder);\n  }\n\n  _createClass(Encoder, [{\n    key: \"encode\",\n    value:\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    function encode(obj) {\n      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n        if (hasBinary(obj)) {\n          obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;\n          return this.encodeAsBinary(obj);\n        }\n      }\n\n      return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n\n  }, {\n    key: \"encodeAsString\",\n    value: function encodeAsString(obj) {\n      // first is type\n      var str = \"\" + obj.type; // attachments if we have them\n\n      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n        str += obj.attachments + \"-\";\n      } // if we have a namespace other than `/`\n      // we append it followed by a comma `,`\n\n\n      if (obj.nsp && \"/\" !== obj.nsp) {\n        str += obj.nsp + \",\";\n      } // immediately followed by the id\n\n\n      if (null != obj.id) {\n        str += obj.id;\n      } // json data\n\n\n      if (null != obj.data) {\n        str += JSON.stringify(obj.data);\n      }\n\n      return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n\n  }, {\n    key: \"encodeAsBinary\",\n    value: function encodeAsBinary(obj) {\n      var deconstruction = deconstructPacket(obj);\n      var pack = this.encodeAsString(deconstruction.packet);\n      var buffers = deconstruction.buffers;\n      buffers.unshift(pack); // add packet info to beginning of data list\n\n      return buffers; // write all the buffers\n    }\n  }]);\n\n  return Encoder;\n}();\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\n\nexport var Decoder = /*#__PURE__*/function (_Emitter) {\n  _inherits(Decoder, _Emitter);\n\n  var _super = _createSuper(Decoder);\n\n  function Decoder() {\n    _classCallCheck(this, Decoder);\n\n    return _super.call(this);\n  }\n  /**\n   * Decodes an encoded packet string into packet JSON.\n   *\n   * @param {String} obj - encoded packet\n   */\n\n\n  _createClass(Decoder, [{\n    key: \"add\",\n    value: function add(obj) {\n      var packet;\n\n      if (typeof obj === \"string\") {\n        packet = this.decodeString(obj);\n\n        if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {\n          // binary packet's json\n          this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow\n\n          if (packet.attachments === 0) {\n            _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n          }\n        } else {\n          // non-binary full packet\n          _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n        }\n      } else if (isBinary(obj) || obj.base64) {\n        // raw binary data\n        if (!this.reconstructor) {\n          throw new Error(\"got binary data when not reconstructing a packet\");\n        } else {\n          packet = this.reconstructor.takeBinaryData(obj);\n\n          if (packet) {\n            // received final buffer\n            this.reconstructor = null;\n\n            _get(_getPrototypeOf(Decoder.prototype), \"emitReserved\", this).call(this, \"decoded\", packet);\n          }\n        }\n      } else {\n        throw new Error(\"Unknown type: \" + obj);\n      }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n\n  }, {\n    key: \"decodeString\",\n    value: function decodeString(str) {\n      var i = 0; // look up type\n\n      var p = {\n        type: Number(str.charAt(0))\n      };\n\n      if (PacketType[p.type] === undefined) {\n        throw new Error(\"unknown packet type \" + p.type);\n      } // look up attachments if type binary\n\n\n      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n        var start = i + 1;\n\n        while (str.charAt(++i) !== \"-\" && i != str.length) {}\n\n        var buf = str.substring(start, i);\n\n        if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n          throw new Error(\"Illegal attachments\");\n        }\n\n        p.attachments = Number(buf);\n      } // look up namespace (if any)\n\n\n      if (\"/\" === str.charAt(i + 1)) {\n        var _start = i + 1;\n\n        while (++i) {\n          var c = str.charAt(i);\n          if (\",\" === c) break;\n          if (i === str.length) break;\n        }\n\n        p.nsp = str.substring(_start, i);\n      } else {\n        p.nsp = \"/\";\n      } // look up id\n\n\n      var next = str.charAt(i + 1);\n\n      if (\"\" !== next && Number(next) == next) {\n        var _start2 = i + 1;\n\n        while (++i) {\n          var _c = str.charAt(i);\n\n          if (null == _c || Number(_c) != _c) {\n            --i;\n            break;\n          }\n\n          if (i === str.length) break;\n        }\n\n        p.id = Number(str.substring(_start2, i + 1));\n      } // look up json data\n\n\n      if (str.charAt(++i)) {\n        var payload = tryParse(str.substr(i));\n\n        if (Decoder.isPayloadValid(p.type, payload)) {\n          p.data = payload;\n        } else {\n          throw new Error(\"invalid payload\");\n        }\n      }\n\n      return p;\n    }\n  }, {\n    key: \"destroy\",\n    value:\n    /**\n     * Deallocates a parser's resources\n     */\n    function destroy() {\n      if (this.reconstructor) {\n        this.reconstructor.finishedReconstruction();\n      }\n    }\n  }], [{\n    key: \"isPayloadValid\",\n    value: function isPayloadValid(type, payload) {\n      switch (type) {\n        case PacketType.CONNECT:\n          return typeof payload === \"object\";\n\n        case PacketType.DISCONNECT:\n          return payload === undefined;\n\n        case PacketType.CONNECT_ERROR:\n          return typeof payload === \"string\" || typeof payload === \"object\";\n\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          return Array.isArray(payload) && payload.length > 0;\n\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          return Array.isArray(payload);\n      }\n    }\n  }]);\n\n  return Decoder;\n}(Emitter);\n\nfunction tryParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\n\n\nvar BinaryReconstructor = /*#__PURE__*/function () {\n  function BinaryReconstructor(packet) {\n    _classCallCheck(this, BinaryReconstructor);\n\n    this.packet = packet;\n    this.buffers = [];\n    this.reconPack = packet;\n  }\n  /**\n   * Method to be called when binary data received from connection\n   * after a BINARY_EVENT packet.\n   *\n   * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n   * @return {null | Object} returns null if more binary data is expected or\n   *   a reconstructed packet object if all buffers have been received.\n   */\n\n\n  _createClass(BinaryReconstructor, [{\n    key: \"takeBinaryData\",\n    value: function takeBinaryData(binData) {\n      this.buffers.push(binData);\n\n      if (this.buffers.length === this.reconPack.attachments) {\n        // done with buffer list\n        var packet = reconstructPacket(this.reconPack, this.buffers);\n        this.finishedReconstruction();\n        return packet;\n      }\n\n      return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n\n  }, {\n    key: \"finishedReconstruction\",\n    value: function finishedReconstruction() {\n      this.reconPack = null;\n      this.buffers = [];\n    }\n  }]);\n\n  return BinaryReconstructor;\n}();","map":{"version":3,"names":["Emitter","deconstructPacket","reconstructPacket","isBinary","hasBinary","protocol","PacketType","Encoder","obj","type","EVENT","ACK","BINARY_EVENT","BINARY_ACK","encodeAsBinary","encodeAsString","str","attachments","nsp","id","data","JSON","stringify","deconstruction","pack","packet","buffers","unshift","Decoder","decodeString","reconstructor","BinaryReconstructor","base64","Error","takeBinaryData","i","p","Number","charAt","undefined","start","length","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","finishedReconstruction","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","parse","e","reconPack","binData","push"],"sources":["/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/index.js"],"sourcesContent":["import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                obj.type =\n                    obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK;\n                return this.encodeAsBinary(obj);\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    constructor() {\n        super();\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            packet = this.decodeString(obj);\n            if (packet.type === PacketType.BINARY_EVENT ||\n                packet.type === PacketType.BINARY_ACK) {\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return typeof payload === \"object\";\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || typeof payload === \"object\";\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return Array.isArray(payload) && payload.length > 0;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n        }\n    }\n}\nfunction tryParse(str) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (e) {\n        return false;\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}