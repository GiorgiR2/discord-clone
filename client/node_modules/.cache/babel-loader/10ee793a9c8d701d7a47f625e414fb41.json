{"ast":null,"code":"import _classCallCheck from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Socket as Engine, installTimerFunctions } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport Backoff from \"backo2\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nexport var Manager = /*#__PURE__*/function (_Emitter) {\n  _inherits(Manager, _Emitter);\n\n  var _super = _createSuper(Manager);\n\n  function Manager(uri, opts) {\n    var _this;\n\n    _classCallCheck(this, Manager);\n\n    var _a;\n\n    _this = _super.call(this);\n    _this.nsps = {};\n    _this.subs = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    _this.opts = opts;\n    installTimerFunctions(_assertThisInitialized(_this), opts);\n\n    _this.reconnection(opts.reconnection !== false);\n\n    _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n\n    _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n\n    _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n\n    _this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n\n    _this.backoff = new Backoff({\n      min: _this.reconnectionDelay(),\n      max: _this.reconnectionDelayMax(),\n      jitter: _this.randomizationFactor()\n    });\n\n    _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n\n    _this._readyState = \"closed\";\n    _this.uri = uri;\n\n    var _parser = opts.parser || parser;\n\n    _this.encoder = new _parser.Encoder();\n    _this.decoder = new _parser.Decoder();\n    _this._autoConnect = opts.autoConnect !== false;\n    if (_this._autoConnect) _this.open();\n    return _this;\n  }\n\n  _createClass(Manager, [{\n    key: \"reconnection\",\n    value: function reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionAttempts\",\n    value: function reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelay\",\n    value: function reconnectionDelay(v) {\n      var _a;\n\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n      return this;\n    }\n  }, {\n    key: \"randomizationFactor\",\n    value: function randomizationFactor(v) {\n      var _a;\n\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelayMax\",\n    value: function reconnectionDelayMax(v) {\n      var _a;\n\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n      return this;\n    }\n  }, {\n    key: \"timeout\",\n    value: function timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n\n  }, {\n    key: \"maybeReconnectOnOpen\",\n    value: function maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(fn) {\n      var _this2 = this;\n\n      if (~this._readyState.indexOf(\"open\")) return this;\n      this.engine = new Engine(this.uri, this.opts);\n      var socket = this.engine;\n      var self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false; // emit `open`\n\n      var openSubDestroy = on(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      }); // emit `error`\n\n      var errorSub = on(socket, \"error\", function (err) {\n        self.cleanup();\n        self._readyState = \"closed\";\n\n        _this2.emitReserved(\"error\", err);\n\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          self.maybeReconnectOnOpen();\n        }\n      });\n\n      if (false !== this._timeout) {\n        var timeout = this._timeout;\n\n        if (timeout === 0) {\n          openSubDestroy(); // prevents a race condition with the 'open' event\n        } // set timer\n\n\n        var timer = this.setTimeoutFn(function () {\n          openSubDestroy();\n          socket.close(); // @ts-ignore\n\n          socket.emit(\"error\", new Error(\"timeout\"));\n        }, timeout);\n\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n\n        this.subs.push(function subDestroy() {\n          clearTimeout(timer);\n        });\n      }\n\n      this.subs.push(openSubDestroy);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(fn) {\n      return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      // clear old subs\n      this.cleanup(); // mark as open\n\n      this._readyState = \"open\";\n      this.emitReserved(\"open\"); // add new subs\n\n      var socket = this.engine;\n      this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onping\",\n    value: function onping() {\n      this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondata\",\n    value: function ondata(data) {\n      this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondecoded\",\n    value: function ondecoded(packet) {\n      this.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n\n  }, {\n    key: \"socket\",\n    value: function socket(nsp, opts) {\n      var socket = this.nsps[nsp];\n\n      if (!socket) {\n        socket = new Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n      }\n\n      return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(socket) {\n      var nsps = Object.keys(this.nsps);\n\n      for (var _i = 0, _nsps = nsps; _i < _nsps.length; _i++) {\n        var nsp = _nsps[_i];\n        var _socket = this.nsps[nsp];\n\n        if (_socket.active) {\n          return;\n        }\n      }\n\n      this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"_packet\",\n    value: function _packet(packet) {\n      var encodedPackets = this.encoder.encode(packet);\n\n      for (var i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.subs.forEach(function (subDestroy) {\n        return subDestroy();\n      });\n      this.subs.length = 0;\n      this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_close\",\n    value: function _close() {\n      this.skipReconnect = true;\n      this._reconnecting = false;\n      this.onclose(\"forced close\");\n      if (this.engine) this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason) {\n      this.cleanup();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      this.emitReserved(\"close\", reason);\n\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this3 = this;\n\n      if (this._reconnecting || this.skipReconnect) return this;\n      var self = this;\n\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        this.backoff.reset();\n        this.emitReserved(\"reconnect_failed\");\n        this._reconnecting = false;\n      } else {\n        var delay = this.backoff.duration();\n        this._reconnecting = true;\n        var timer = this.setTimeoutFn(function () {\n          if (self.skipReconnect) return;\n\n          _this3.emitReserved(\"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n\n          if (self.skipReconnect) return;\n          self.open(function (err) {\n            if (err) {\n              self._reconnecting = false;\n              self.reconnect();\n\n              _this3.emitReserved(\"reconnect_error\", err);\n            } else {\n              self.onreconnect();\n            }\n          });\n        }, delay);\n\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n\n        this.subs.push(function subDestroy() {\n          clearTimeout(timer);\n        });\n      }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onreconnect\",\n    value: function onreconnect() {\n      var attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n      this.emitReserved(\"reconnect\", attempt);\n    }\n  }]);\n\n  return Manager;\n}(Emitter);","map":{"version":3,"names":["Socket","Engine","installTimerFunctions","parser","on","Backoff","Emitter","Manager","uri","opts","_a","nsps","subs","undefined","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","v","arguments","length","_reconnection","_reconnectionAttempts","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","_reconnecting","attempts","reconnect","fn","indexOf","engine","socket","self","skipReconnect","openSubDestroy","onopen","errorSub","err","cleanup","emitReserved","maybeReconnectOnOpen","timer","setTimeoutFn","close","emit","Error","autoUnref","unref","push","subDestroy","clearTimeout","onping","bind","ondata","onerror","onclose","ondecoded","data","add","packet","nsp","Object","keys","active","_close","encodedPackets","encode","i","write","options","forEach","destroy","reason","reset","delay","duration","onreconnect","attempt"],"sources":["/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/socket.io-client/build/esm/manager.js"],"sourcesContent":["import { Socket as Engine, installTimerFunctions, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport Backoff from \"backo2\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        // emit `error`\n        const errorSub = on(socket, \"error\", (err) => {\n            self.cleanup();\n            self._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                self.maybeReconnectOnOpen();\n            }\n        });\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            if (timeout === 0) {\n                openSubDestroy(); // prevents a race condition with the 'open' event\n            }\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                socket.close();\n                // @ts-ignore\n                socket.emit(\"error\", new Error(\"timeout\"));\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        this.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason) {\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}