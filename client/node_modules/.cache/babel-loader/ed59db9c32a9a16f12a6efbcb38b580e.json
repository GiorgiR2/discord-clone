{"ast":null,"code":"import parseuri from \"parseuri\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\n\nexport function url(uri, path = \"\", loc) {\n  let obj = uri; // default to window.location\n\n  loc = loc || typeof location !== \"undefined\" && location;\n  if (null == uri) uri = loc.protocol + \"//\" + loc.host; // relative path support\n\n  if (typeof uri === \"string\") {\n    if (\"/\" === uri.charAt(0)) {\n      if (\"/\" === uri.charAt(1)) {\n        uri = loc.protocol + uri;\n      } else {\n        uri = loc.host + uri;\n      }\n    }\n\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\n      if (\"undefined\" !== typeof loc) {\n        uri = loc.protocol + \"//\" + uri;\n      } else {\n        uri = \"https://\" + uri;\n      }\n    } // parse\n\n\n    obj = parseuri(uri);\n  } // make sure we treat `localhost:80` and `localhost` equally\n\n\n  if (!obj.port) {\n    if (/^(http|ws)$/.test(obj.protocol)) {\n      obj.port = \"80\";\n    } else if (/^(http|ws)s$/.test(obj.protocol)) {\n      obj.port = \"443\";\n    }\n  }\n\n  obj.path = obj.path || \"/\";\n  const ipv6 = obj.host.indexOf(\":\") !== -1;\n  const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host; // define unique id\n\n  obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path; // define href\n\n  obj.href = obj.protocol + \"://\" + host + (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n  return obj;\n}","map":{"version":3,"sources":["/home/giorgir/Desktop/web projects/discord-mern/client/node_modules/socket.io-client/build/esm/url.js"],"names":["parseuri","url","uri","path","loc","obj","location","protocol","host","charAt","test","port","ipv6","indexOf","id","href"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,GAAT,CAAaC,GAAb,EAAkBC,IAAI,GAAG,EAAzB,EAA6BC,GAA7B,EAAkC;AACrC,MAAIC,GAAG,GAAGH,GAAV,CADqC,CAErC;;AACAE,EAAAA,GAAG,GAAGA,GAAG,IAAK,OAAOE,QAAP,KAAoB,WAApB,IAAmCA,QAAjD;AACA,MAAI,QAAQJ,GAAZ,EACIA,GAAG,GAAGE,GAAG,CAACG,QAAJ,GAAe,IAAf,GAAsBH,GAAG,CAACI,IAAhC,CALiC,CAMrC;;AACA,MAAI,OAAON,GAAP,KAAe,QAAnB,EAA6B;AACzB,QAAI,QAAQA,GAAG,CAACO,MAAJ,CAAW,CAAX,CAAZ,EAA2B;AACvB,UAAI,QAAQP,GAAG,CAACO,MAAJ,CAAW,CAAX,CAAZ,EAA2B;AACvBP,QAAAA,GAAG,GAAGE,GAAG,CAACG,QAAJ,GAAeL,GAArB;AACH,OAFD,MAGK;AACDA,QAAAA,GAAG,GAAGE,GAAG,CAACI,IAAJ,GAAWN,GAAjB;AACH;AACJ;;AACD,QAAI,CAAC,sBAAsBQ,IAAtB,CAA2BR,GAA3B,CAAL,EAAsC;AAClC,UAAI,gBAAgB,OAAOE,GAA3B,EAAgC;AAC5BF,QAAAA,GAAG,GAAGE,GAAG,CAACG,QAAJ,GAAe,IAAf,GAAsBL,GAA5B;AACH,OAFD,MAGK;AACDA,QAAAA,GAAG,GAAG,aAAaA,GAAnB;AACH;AACJ,KAhBwB,CAiBzB;;;AACAG,IAAAA,GAAG,GAAGL,QAAQ,CAACE,GAAD,CAAd;AACH,GA1BoC,CA2BrC;;;AACA,MAAI,CAACG,GAAG,CAACM,IAAT,EAAe;AACX,QAAI,cAAcD,IAAd,CAAmBL,GAAG,CAACE,QAAvB,CAAJ,EAAsC;AAClCF,MAAAA,GAAG,CAACM,IAAJ,GAAW,IAAX;AACH,KAFD,MAGK,IAAI,eAAeD,IAAf,CAAoBL,GAAG,CAACE,QAAxB,CAAJ,EAAuC;AACxCF,MAAAA,GAAG,CAACM,IAAJ,GAAW,KAAX;AACH;AACJ;;AACDN,EAAAA,GAAG,CAACF,IAAJ,GAAWE,GAAG,CAACF,IAAJ,IAAY,GAAvB;AACA,QAAMS,IAAI,GAAGP,GAAG,CAACG,IAAJ,CAASK,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAAxC;AACA,QAAML,IAAI,GAAGI,IAAI,GAAG,MAAMP,GAAG,CAACG,IAAV,GAAiB,GAApB,GAA0BH,GAAG,CAACG,IAA/C,CAtCqC,CAuCrC;;AACAH,EAAAA,GAAG,CAACS,EAAJ,GAAST,GAAG,CAACE,QAAJ,GAAe,KAAf,GAAuBC,IAAvB,GAA8B,GAA9B,GAAoCH,GAAG,CAACM,IAAxC,GAA+CR,IAAxD,CAxCqC,CAyCrC;;AACAE,EAAAA,GAAG,CAACU,IAAJ,GACIV,GAAG,CAACE,QAAJ,GACI,KADJ,GAEIC,IAFJ,IAGKJ,GAAG,IAAIA,GAAG,CAACO,IAAJ,KAAaN,GAAG,CAACM,IAAxB,GAA+B,EAA/B,GAAoC,MAAMN,GAAG,CAACM,IAHnD,CADJ;AAKA,SAAON,GAAP;AACH","sourcesContent":["import parseuri from \"parseuri\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parseuri(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n"]},"metadata":{},"sourceType":"module"}