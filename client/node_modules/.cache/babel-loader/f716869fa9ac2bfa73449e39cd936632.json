{"ast":null,"code":"import io from 'socket.io-client';\n\nconst main = (room, username, setElement, setOnline, setOffline) => {\n  if (socket.disconnected) socket = io.connect(domain);\n  socket.emit('join', {\n    room: room,\n    username: username\n  });\n  console.log(\"sent join\", room, username); // socket.on('connect', () => {\n  // console.log(\"connected\", room, username);\n  // socket.emit('join', {\n  //     room: room,\n  //     username: username,\n  // });\n  // });\n\n  socket.on('M_S_O', data => {\n    console.log('received', data.message);\n    setElement({\n      user: data.username,\n      msg: data.message,\n      date: data.datetime\n    });\n  });\n  socket.on('messagesData', data => {\n    data.forEach(el => setElement({\n      user: el.user,\n      msg: el.message,\n      date: el.date\n    }));\n  });\n  socket.on('online', data => {\n    setOnline(\"\");\n    setOnline(data.username);\n  });\n  socket.on('offline', data => {\n    setOffline(\"\");\n    setOffline(data.username);\n  });\n  socket.on('status', data => {\n    data.forEach(el => {\n      if (el.status === \"online\") setOnline(el.username);else setOffline(el.username);\n    });\n  });\n};\n\nconst urlify = text => {\n  var urlRegex = /(https?:\\/\\/[^\\s]+)/g;\n  return text.replace(urlRegex, function (url) {\n    return `</a12>${url}</a12>`;\n  });\n};\n\nlet getTime = () => {\n  let currentdate = new Date();\n  let datetime = `${currentdate.getMonth() + 1}/${currentdate.getDate()}/${currentdate.getFullYear()} ${currentdate.getHours()}:${currentdate.getMinutes()}`;\n  return datetime;\n};\n\nconst sendMessage = (e, user, room, roomId, authentication) => {\n  if (e.key === \"Enter\" && e.shiftKey !== true && e.target.value != null) {\n    let message = e.target.value;\n    let datetime = getTime();\n    let sdata = {\n      authentication: authentication,\n      username: user,\n      message: message,\n      datetime: datetime,\n      room: room,\n      roomId: roomId\n    };\n    socket.emit('message', sdata);\n    e.target.value = \"\";\n    e.preventDefault();\n  }\n};\n\nconst disconnect = () => socket.disconnect();\n\nconst domain = `http://${window.location.hostname}:5000`;\nvar socket = io.connect(domain);\nexport { socket, main, sendMessage, disconnect };","map":{"version":3,"names":["io","main","room","username","setElement","setOnline","setOffline","socket","disconnected","connect","domain","emit","console","log","on","data","message","user","msg","date","datetime","forEach","el","status","urlify","text","urlRegex","replace","url","getTime","currentdate","Date","getMonth","getDate","getFullYear","getHours","getMinutes","sendMessage","e","roomId","authentication","key","shiftKey","target","value","sdata","preventDefault","disconnect","window","location","hostname"],"sources":["/home/giorgir/Desktop/web projects/discord-mern/client/src/components/js/_socketSide.js"],"sourcesContent":["import io from 'socket.io-client';\r\n\r\nconst main = (room, username, setElement, setOnline, setOffline) => {\r\n    if (socket.disconnected)\r\n        socket = io.connect(domain);\r\n\r\n    socket.emit('join', {\r\n        room: room,\r\n        username: username,\r\n    });\r\n    console.log(\"sent join\", room, username);\r\n    // socket.on('connect', () => {\r\n        // console.log(\"connected\", room, username);\r\n        // socket.emit('join', {\r\n        //     room: room,\r\n        //     username: username,\r\n        // });\r\n    // });\r\n\r\n    socket.on('M_S_O', (data) => {\r\n        console.log('received', data.message);\r\n        setElement({\r\n            user: data.username,\r\n            msg: data.message,\r\n            date: data.datetime\r\n        });\r\n    });\r\n\r\n    socket.on('messagesData', (data) => {\r\n        data.forEach(el => setElement({\r\n            user: el.user,\r\n            msg: el.message,\r\n            date: el.date,\r\n        }));\r\n    });\r\n\r\n    socket.on('online', (data) => {\r\n        setOnline(\"\");\r\n        setOnline(data.username);\r\n    });\r\n\r\n    socket.on('offline', (data) => {\r\n        setOffline(\"\");\r\n        setOffline(data.username);\r\n    });\r\n\r\n    socket.on('status', (data) => {\r\n        data.forEach(el => {\r\n            if (el.status === \"online\")\r\n                setOnline(el.username);\r\n            else\r\n                setOffline(el.username);\r\n        });\r\n    });\r\n}\r\n\r\nconst urlify = (text) => {\r\n    var urlRegex = /(https?:\\/\\/[^\\s]+)/g;\r\n    return text.replace(urlRegex, function(url) {\r\n      return `</a12>${url}</a12>`;\r\n    })\r\n}\r\n\r\nlet getTime = () => {\r\n    let currentdate = new Date();\r\n\r\n    let datetime = `${currentdate.getMonth()+1}/${currentdate.getDate()}/${currentdate.getFullYear()} ${currentdate.getHours()}:${currentdate.getMinutes()}`;\r\n\r\n    return datetime;\r\n}\r\n\r\nconst sendMessage = (e, user, room, roomId, authentication) => {\r\n    if (e.key === \"Enter\" && e.shiftKey !== true && e.target.value != null){\r\n        let message = e.target.value;\r\n        let datetime = getTime();\r\n\r\n        let sdata = {\r\n            authentication: authentication,\r\n            username:  user,\r\n            message: message,\r\n            datetime: datetime,\r\n            room: room,\r\n            roomId: roomId,\r\n        };\r\n        \r\n        socket.emit('message', sdata);\r\n        e.target.value = \"\";\r\n        e.preventDefault();\r\n    }\r\n}\r\n\r\nconst disconnect = () => socket.disconnect();\r\n\r\nconst domain = `http://${window.location.hostname}:5000`;\r\nvar socket = io.connect(domain);\r\n\r\nexport {\r\n    socket,\r\n    main,\r\n    sendMessage,\r\n    disconnect,\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}