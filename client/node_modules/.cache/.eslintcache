[{"/home/giorgir/Desktop/web projects/discord-mern/client/src/index.js":"1","/home/giorgir/Desktop/web projects/discord-mern/client/src/App.js":"2","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Login/Login.js":"3","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Signup/Sign_Up.js":"4","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Chat/Chat.js":"5","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Chat/_appendFile.js":"6","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Chat/_editCat.js":"7","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/js/_getBasicData.js":"8","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/js/_socketSide.js":"9","/home/giorgir/Desktop/web projects/discord-mern/client/src/styles/SVGs/_SVGs.js":"10","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Voice/_voice.js":"11"},{"size":201,"mtime":1637598018000,"results":"12","hashOfConfig":"13"},{"size":762,"mtime":1642956250000,"results":"14","hashOfConfig":"13"},{"size":2046,"mtime":1641993258000,"results":"15","hashOfConfig":"13"},{"size":2193,"mtime":1642411874000,"results":"16","hashOfConfig":"13"},{"size":8803,"mtime":1657487732000,"results":"17","hashOfConfig":"13"},{"size":70,"mtime":1640078042000,"results":"18","hashOfConfig":"13"},{"size":3778,"mtime":1648918378000,"results":"19","hashOfConfig":"13"},{"size":822,"mtime":1644526832000,"results":"20","hashOfConfig":"13"},{"size":2612,"mtime":1649061274000,"results":"21","hashOfConfig":"13"},{"size":4718,"mtime":1649063408000,"results":"22","hashOfConfig":"13"},{"size":4170,"mtime":1649100964000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hdp3ey",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"/home/giorgir/Desktop/web projects/discord-mern/client/src/index.js",[],[],"/home/giorgir/Desktop/web projects/discord-mern/client/src/App.js",[],[],"/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Login/Login.js",["64"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom'; // { Link, Redirect }\r\nimport axios from 'axios';\r\n\r\nimport { getBasicData } from '../js/_getBasicData';\r\n\r\nimport './_login.sass';\r\n\r\nconst sendLoginData = (e, user, pswrd, history) => {\r\n    e.preventDefault();\r\n    let data = {\r\n        username: user,\r\n        password: pswrd\r\n    };\r\n\r\n    axios.post(\"/api/users/login\", data)\r\n    .then(res => {\r\n        if (res.data.data === \"done\") {\r\n            history.push(`/chat`); // /?id=${res.data.data}\r\n        }\r\n        else {\r\n            alert(\"Try again...\");\r\n        }\r\n    })\r\n    .catch(err => console.error('fcking error...', err));\r\n};\r\n\r\nconst Login = () => {\r\n    document.title = \"login section\";\r\n\r\n    const [userName, setUserName] = useState();\r\n    const [password, setPassword] = useState();\r\n    const history = useHistory();\r\n\r\n    const queryParams = new URLSearchParams(window.location.search);\r\n    // console.log(queryParams.get('status')===null);\r\n    useEffect(() => {\r\n        if (queryParams.get('status') === \"done\"){ // successfully registered\r\n            alert(\"registration is done...\");\r\n        }\r\n\r\n        getBasicData(history);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <h2 className=\"title\">Login</h2>\r\n            <h2 className=\"username\">UserName:</h2>\r\n            <h2 className=\"password\">Password:</h2>\r\n\r\n            <input type=\"text\" className=\"e-name\" rows=\"1\" cols=\"20\" onChange={(event) => setUserName(event.target.value)} />\r\n            <input type=\"password\" className=\"e-pass\" rows=\"1\" cols=\"20\" onChange={(event) => setPassword(event.target.value)} />\r\n\r\n            <form onSubmit={(event) => sendLoginData(event, userName, password, history)}>\r\n                <button type=\"submit\" className=\"go-button\">\r\n                    GO\r\n                </button>\r\n            </form>\r\n\r\n            <a href=\"/signup\" className=\"sign-up-button\">Sign up</a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Signup/Sign_Up.js",["65"],[],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport { getBasicData } from '../js/_getBasicData';\r\n\r\nimport './_sign-up.sass';\r\n\r\nconst sendData = (e, username, password0, password1, history) => {\r\n    e.preventDefault();\r\n    const data = {\r\n        username: username,\r\n        password0: password0,\r\n        password1: password1\r\n    };\r\n\r\n    axios.post('/api/users/register', data)\r\n    .then(res => {\r\n        console.log(\"res\", res.data);\r\n        if (res.data.data === \"done\"){\r\n            history.push('/?status=done');\r\n        }\r\n        else\r\n            alert(\"try again, something went wrong...\");\r\n    })\r\n    .catch(err => console.log(err));\r\n}\r\n\r\nconst SignUp = () => {\r\n    const [username, setUsername] = useState();\r\n    const [password0, setPassword0] = useState();\r\n    const [password1, setPassword1] = useState();\r\n\r\n    const history = useHistory();\r\n    // let { signup } = useParams();\r\n\r\n    document.title = \"sign up\";\r\n\r\n    useEffect(() => {\r\n        getBasicData(history);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"sign-up\">\r\n            <h2 className=\"sign-up-title\">sign up</h2>\r\n            <h2 className=\"username\">UserName:</h2>\r\n            <h2 className=\"password00\">Password:</h2>\r\n            <h2 className=\"password01\">Repeat Password:</h2>\r\n\r\n            <input type=\"text\"     className=\"e-name\"                  rows=\"1\" cols=\"15\" onChange={(event) => setUsername(event.target.value)}/>\r\n            <input type=\"password\" className=\"pass0\" autoComplete=\"on\" rows=\"1\" cols=\"15\" onChange={(event) => setPassword0(event.target.value)}/>\r\n            <input type=\"password\" className=\"pass1\" autoComplete=\"on\" rows=\"1\" cols=\"15\" onChange={(event) => setPassword1(event.target.value)}/>\r\n\r\n            <button className=\"go-button\" onClick={(event) => sendData(event, username, password0, password1, history)}>\r\n                GO\r\n            </button> \r\n\r\n            <a href=\"/\" className=\"go-back-button\">go back</a>\r\n\r\n            {/* if error => alert(\"please repeat password correctly...\"); */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignUp;","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Chat/Chat.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83"],[],"import React, { useState, useEffect, useReducer } from 'react';\r\n\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport FormData from 'form-data';\r\n\r\nimport './_chat.sass';\r\nimport { EditSVG, MicSVGOff, MicSVGOn, CamSVGOff, CamSVGOn, ScreenShareOff, ScreenShareOn } from '../../styles/SVGs/_SVGs';\r\n\r\nimport { appendFile } from './_appendFile';\r\nimport { getBasicData } from '../js/_getBasicData';\r\nimport * as socks from '../js/_socketSide';\r\n\r\n// import { WebRTCFrame } from '../WebRTCInteractive/WebRTCInteractive';\r\nimport { VoiceFrame } from '../Voice/_voice';\r\n\r\nimport { PopupEditCat, PopupAddCat } from './_editCat';\r\n\r\nconst checkRoomId = (roomId, setCategory, history, setVoiceMode) => {\r\n    if (roomId === undefined)\r\n        history.push(\"/chat/61ed960432479c682956802b\");\r\n        // roomId = \"61ed960432479c682956802b\";\r\n\r\n    axios.post(\"/api/roomId\", { id: roomId })\r\n    .then(res => {\r\n        if (res.data.roomName != \"try_again\"){\r\n            setCategory(res.data.roomName);\r\n            if (res.data.voiceMode)\r\n                setVoiceMode(true);\r\n        }\r\n        else{\r\n            history.push(\"/chat/61ed960432479c682956802b\");\r\n            // roomId = \"61ed960432479c682956802b\";\r\n            setCategory(\"room 1\");\r\n            setVoiceMode(false);\r\n        }\r\n    })\r\n    .catch(err => console.error(err));\r\n}\r\n\r\nconst logOut = (e, history) => {\r\n    e.preventDefault();\r\n    axios.post(\"/api/users/logout\", { junk: \"\" })\r\n    .then(res => {\r\n        if (res.data.status === \"done\")\r\n            history.push(\"/\");\r\n    })\r\n    .catch(err => console.error(err));\r\n\r\n    socks.disconnect();\r\n}\r\n\r\nconst newMessage = (user, msg, date) => (\r\n    <div className=\"element\">\r\n        <div className=\"author\">\r\n            {user}\r\n        </div>\r\n        <div className=\"message\">\r\n            {msg.split(\"\\n\").map(line => <div>{line}</div>)}\r\n        </div>\r\n        <div className=\"date\">\r\n           {date}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nconst CategoriesJSX = ({ cats, display, setDisplay, setElementId }) =>\r\n    cats.map(cat => <li className=\"category\" id={cat._id}>\r\n        <a href={`/chat/${cat._id}`}># {cat.name}</a>\r\n        <EditSVG id={cat._id} display={display} setDisplay={setDisplay} setElementId={setElementId} />\r\n    </li>);\r\n\r\nconst Chat = () => {\r\n    const Categories = () => (\r\n        // { user, cats, displayEdit, setDisplayEdit, displayAdd, setDisplayAdd, setElementId}\r\n        <div className=\"categories\">\r\n            <div className=\"top\">\r\n                <div className=\"topbar\">\r\n                    <h1 className=\"user\">{userName}</h1>\r\n                    <h1 className=\"plus\" onClick={() => setDisplayAdd(!displayAdd)}>+</h1>\r\n                </div>\r\n    \r\n                <nav>\r\n                    <ul id=\"ul-id\">\r\n                        <CategoriesJSX cats={catjson} display={displayEdit} setDisplay={setDisplayEdit} setElementId={setElementId} />\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n    const Messages = () => { // { authentication, room, roomId, elements, user }\r\n        const sendFile = () => {\r\n            // sendFile(e.target.files[0])\r\n            let file = selectedFile;\r\n            console.log(\"shit\", file);\r\n            // const formData = new FormData();\r\n            // formData.append(\"user\", userName);\r\n            // // formData.append(\"time\", \"00:00\");\r\n            // formData.append(\"size\", file.size); // in bites\r\n            // // let fileF = \"\";\r\n            // formData.append(\"file\", selectedFile, file.name);\r\n            // axios.post(\"/upload\", formData)\r\n            //      .then(res => {\r\n            //         console.log(\"Successfully Uploaded...\");\r\n            //      })\r\n            //      .catch(err => alert(err));\r\n        }\r\n\r\n        const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n        useEffect(() => {\r\n            if (selectedFile != null)\r\n                sendFile();\r\n        }, [selectedFile]);\r\n\r\n        return (\r\n        <>\r\n            <div id=\"chat-screen\">\r\n                {elements.map(el => newMessage(el.user, el.msg, el.date))}\r\n                <div id=\"last-element\"></div>\r\n            </div>\r\n            <div id=\"input\">\r\n                <textarea\r\n                    id=\"text-area\"\r\n                    type=\"text\"\r\n                    placeholder={`Message #${category}`}\r\n                    onKeyPress={(e) => socks.sendMessage(e, userName, category, roomId, authentication)}\r\n                ></textarea>\r\n                {/* <svg viewBox=\"0 0 24 24\" onClick={(event) => appendFile(event)}>\r\n                    <path\r\n                    fill=\"currentColor\"\r\n                    d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\">\r\n                    </path>\r\n                </svg> */}\r\n                <input type=\"file\" value={selectedFile} onChange={(e) => setSelectedFile(e.target.files[0])}/>\r\n            </div>\r\n        </>\r\n        );\r\n    }\r\n    \r\n    const Center = () => (\r\n        <div className=\"messages\">\r\n            <div id=\"top\">\r\n                <h1 id=\"category\"># {category}</h1>\r\n                <h1 id=\"log_out\" onClick={(event) => {logOut(event, history)}}>Log out</h1>\r\n            </div>\r\n\r\n            {voiceMode\r\n            ? <VoiceFrame history={history} roomId={roomId} userName={userName} />\r\n            : <Messages/>}\r\n        </div>\r\n    )\r\n\r\n    const StatusBar = () => ( // { online, offline }\r\n        <div className=\"status-bar\">\r\n            <h2>ACTIVE - {onlineList.length}</h2>\r\n            {onlineList.map(el => <h2 className=\"online\">--- {el}</h2>)}\r\n            <h2>OFFLINE - {offlineList.length}</h2>\r\n            {offlineList.map(el => <h2 className=\"offline\">--- {el}</h2>)}\r\n        </div>\r\n    )\r\n\r\n    const reducer = (state, action) => {\r\n        // pass\r\n    }\r\n\r\n    const initialState = {\r\n        setOnline: \"\",\r\n        setOffline: \"\",\r\n        onlineList: [],\r\n        offlineList: [],\r\n    };\r\n\r\n    const [online, setOnline] = useState(\"\");\r\n    const [offline, setOffline] = useState(\"\");\r\n    const [onlineList, setOnlineList] = useState([]);\r\n    const [offlineList, setOfflineList] = useState([]);\r\n    \r\n    // const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    let { roomId } = useParams();\r\n\r\n    const [userName, setUserName] = useState(\"\");\r\n    const [category, setCategory] = useState(\"\");\r\n\r\n    const [catjson, setCatJson] = useState([]);\r\n    const [authentication, setAuthentication] = useState();\r\n\r\n    const [element, setElement] = useState({\r\n        user: \"author\",\r\n        msg: \"message\",\r\n        date: \"date\"});\r\n    const [elements, setElements] = useState([]);\r\n\r\n    const [displayEdit, setDisplayEdit] = useState(false);\r\n    const [displayAdd, setDisplayAdd] = useState(false);\r\n    const [elementId, setElementId] = useState();\r\n\r\n    const [voiceMode, setVoiceMode] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        checkRoomId(roomId, setCategory, history, setVoiceMode);\r\n\r\n        getBasicData(history, setUserName, setAuthentication, setCatJson, \"chat\");\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (userName !== \"\")\r\n            socks.main(category, userName, setElement, setOnline, setOffline);\r\n    }, [userName]);\r\n\r\n    useEffect(() => {\r\n        setElements([...elements, element]);\r\n    }, [element]);\r\n\r\n    useEffect(() => {\r\n        let el = document.getElementById(\"last-element\");\r\n        el.scrollIntoView();\r\n    }, [elements]);\r\n\r\n    useEffect(() => {\r\n        if (online !== \"\"){\r\n            let new_offlineList = offlineList.filter(element => element !== online)\r\n            setOfflineList(new_offlineList);\r\n            setOnlineList([...onlineList, online]);\r\n        }\r\n    }, [online]);\r\n\r\n    useEffect(() => {\r\n        if (offline !== \"\"){\r\n            let new_onlineList = onlineList.filter(element => element !== offline)\r\n            setOnlineList(new_onlineList);\r\n            setOfflineList([...offlineList, offline]);\r\n        }\r\n    }, [offline]);\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            { displayEdit ?\r\n            <PopupEditCat\r\n                setDisplay={setDisplayEdit}\r\n                catjson={catjson}\r\n                setCatJson={setCatJson}\r\n                elementId={elementId}\r\n            /> : null\r\n            }\r\n            { displayAdd ?\r\n            <PopupAddCat\r\n                setDisplay={setDisplayAdd}\r\n                catjson={catjson}\r\n                setCatJson={setCatJson}\r\n            /> : null\r\n            }\r\n\r\n            <Categories/>\r\n            <Center/>\r\n            <StatusBar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Chat/_appendFile.js",[],[],"/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Chat/_editCat.js",["84"],[],"import React, { useRef } from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport \"./_editCat.sass\";\r\n\r\nconst PopupEditCat = ({ setDisplay, catjson, setCatJson, elementId }) => {\r\n    const newNameRef = useRef();\r\n\r\n    return(\r\n        <div className=\"popup\">\r\n            <div className=\"center\">\r\n                <h4 className=\"label\">New Name:</h4>\r\n                <input rows=\"1\" columns=\"20\" ref={newNameRef}/>\r\n\r\n                <div className=\"buttons\">\r\n                    <h4 className=\"cancel\" onClick={() => setDisplay(false)}>\r\n                        CANCEL\r\n                    </h4>\r\n                    <h4 className=\"go\" onClick={(event) =>\r\n                        sendEditCommand(event, elementId, catjson, setCatJson, newNameRef.current.value, setDisplay)}>\r\n                        GO\r\n                    </h4>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst PopupAddCat = ({ setDisplay, catjson, setCatJson }) => {\r\n    const newNameRef = useRef();\r\n\r\n    return(\r\n        <div className=\"popup\">\r\n            <div className=\"center\">\r\n                <h4 className=\"label\">Add Category:</h4>\r\n\r\n                <input rows=\"1\" columns=\"20\" ref={newNameRef}/>\r\n\r\n                <div className=\"buttons\">\r\n                    <h4 className=\"cancel\" onClick={() => setDisplay(false)}>\r\n                        CANCEL\r\n                    </h4>\r\n                    <h4 className=\"go\" onClick={(event) => sendAddCommand(event, catjson, setCatJson, newNameRef.current.value)}>\r\n                        GO\r\n                    </h4>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst sendEditCommand = (event, elementId, catJson, setCatJson, newName, setDisplay) => {\r\n    // console.log(\"newName =\", newName);\r\n    // console.log(\"id =\", elementId);\r\n    // console.log(catJson);\r\n    if (newName != \"\"){\r\n        axios.post(\"/api/editCat\", { catId: elementId, newCatName: newName })\r\n        .then(res => {\r\n            if (res.data.status === \"done\"){\r\n                // update category name\r\n\r\n                setDisplay(false);\r\n                let newJson = catJson.map(cat => {\r\n                    if (cat._id === elementId){\r\n                        return {\r\n                            name: newName,\r\n                            position: cat.position,\r\n                            voice: cat.voice,\r\n                            __v: cat.__v,\r\n                            _id: cat._id\r\n                        };\r\n                    }\r\n                    else\r\n                        return cat;\r\n                });\r\n\r\n                setCatJson(newJson);\r\n            }\r\n            else if (res.data.status === \"try again\"){\r\n                alert(\"try again...\");\r\n            }\r\n        })\r\n        .catch(err => console.error(err));\r\n    }\r\n}\r\n\r\nconst sendAddCommand = (event, catJson, setCatJson, newName) => {\r\n    // console.log(\"newName =\", newName);\r\n    // console.log(catJson);\r\n    if (newName !== \"\"){\r\n        alert(\"function not available...\");\r\n        // axios.post(\"/api/addCat\", { newCatName: newName })\r\n        // .then(res => {\r\n        //     if (res.data.status === \"done\"){\r\n        //         // add cat\r\n        //         let newJson = [...catJson, ];\r\n\r\n        //         setCatJson(newJson);\r\n        //     }\r\n        //     else if (res.data.status === \"try again\"){\r\n        //         alert(\"try again...\");\r\n        //     }\r\n        // })\r\n        // .catch(err => console.error(err));\r\n    }\r\n}\r\n\r\nconst editCat = (event, id, display, setDisplay, setElementId) => {\r\n    event.preventDefault();\r\n    setDisplay(true);\r\n    setElementId(id);\r\n\r\n    // console.log(\"id\", id, display);\r\n}\r\n\r\nexport {\r\n    PopupEditCat, PopupAddCat, editCat,\r\n};","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/js/_getBasicData.js",[],[],"/home/giorgir/Desktop/web projects/discord-mern/client/src/components/js/_socketSide.js",["85"],[],"import io from 'socket.io-client';\r\n\r\nconst main = (room, username, setElement, setOnline, setOffline) => {\r\n    if (socket.disconnected)\r\n        socket = io.connect(domain);\r\n\r\n    socket.emit('join', {\r\n        room: room,\r\n        username: username,\r\n    });\r\n    console.log(\"sent join\", room, username);\r\n    // socket.on('connect', () => {\r\n        // console.log(\"connected\", room, username);\r\n        // socket.emit('join', {\r\n        //     room: room,\r\n        //     username: username,\r\n        // });\r\n    // });\r\n\r\n    socket.on('M_S_O', (data) => {\r\n        console.log('received', data.message);\r\n        setElement({\r\n            user: data.username,\r\n            msg: data.message,\r\n            date: data.datetime\r\n        });\r\n    });\r\n\r\n    socket.on('messagesData', (data) => {\r\n        data.forEach(el => setElement({\r\n            user: el.user,\r\n            msg: el.message,\r\n            date: el.date,\r\n        }));\r\n    });\r\n\r\n    socket.on('online', (data) => {\r\n        setOnline(\"\");\r\n        setOnline(data.username);\r\n    });\r\n\r\n    socket.on('offline', (data) => {\r\n        setOffline(\"\");\r\n        setOffline(data.username);\r\n    });\r\n\r\n    socket.on('status', (data) => {\r\n        data.forEach(el => {\r\n            if (el.status === \"online\")\r\n                setOnline(el.username);\r\n            else\r\n                setOffline(el.username);\r\n        });\r\n    });\r\n}\r\n\r\nconst urlify = (text) => {\r\n    var urlRegex = /(https?:\\/\\/[^\\s]+)/g;\r\n    return text.replace(urlRegex, function(url) {\r\n      return `</a12>${url}</a12>`;\r\n    })\r\n}\r\n\r\nlet getTime = () => {\r\n    let currentdate = new Date();\r\n\r\n    let datetime = `${currentdate.getMonth()+1}/${currentdate.getDate()}/${currentdate.getFullYear()} ${currentdate.getHours()}:${currentdate.getMinutes()}`;\r\n\r\n    return datetime;\r\n}\r\n\r\nconst sendMessage = (e, user, room, roomId, authentication) => {\r\n    if (e.key === \"Enter\" && e.shiftKey !== true && e.target.value != null){\r\n        let message = e.target.value;\r\n        let datetime = getTime();\r\n\r\n        let sdata = {\r\n            authentication: authentication,\r\n            username:  user,\r\n            message: message,\r\n            datetime: datetime,\r\n            room: room,\r\n            roomId: roomId,\r\n        };\r\n        \r\n        socket.emit('message', sdata);\r\n        e.target.value = \"\";\r\n        e.preventDefault();\r\n    }\r\n}\r\n\r\nconst disconnect = () => socket.disconnect();\r\n\r\nconst domain = `http://${window.location.hostname}:5000`;\r\nvar socket = io.connect(domain);\r\n\r\nexport {\r\n    socket,\r\n    main,\r\n    sendMessage,\r\n    disconnect,\r\n};","/home/giorgir/Desktop/web projects/discord-mern/client/src/styles/SVGs/_SVGs.js",["86"],[],"import React from 'react';\r\n\r\nimport { editCat } from '../../components/Chat/_editCat';\r\n\r\n// import CamOff from './videoOff.svg';\r\n// import FullScreen0 from './fullScreen.svg';\r\n\r\nconst changeMode = (mediaData, setMediaData, button) => {\r\n    // \"data\" should be immutable (send a new array each time)\r\n    let data = { audio: mediaData.audio, video: mediaData.video };\r\n\r\n    if (button === \"video\")\r\n        data.video = !mediaData.video;\r\n    else if (button === \"audio\")\r\n        data.audio = !mediaData.audio;\r\n\r\n    setMediaData(data);\r\n}\r\n\r\nconst EditSVG = ({ id, display, setDisplay, setElementId}) => (\r\n    <svg\r\n    onClick={(e) => editCat(e, id, display, setDisplay, setElementId)}\r\n    xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M18.303 4.742L16.849 3.287C16.678 3.116 16.374 3.116 16.203 3.287L13.142 6.351H2.01901C1.76801 6.351 1.56201 6.556 1.56201 6.807V16.385C1.56201 16.636 1.76801 16.841 2.01901 16.841H15.702C15.954 16.841 16.159 16.636 16.159 16.385V7.533L18.303 5.387C18.481 5.208 18.483 4.917 18.303 4.742ZM15.258 15.929H2.47601V7.263H12.23L9.69501 9.792C9.63801 9.849 9.59401 9.922 9.57601 10.004L9.18001 11.36H5.20001C4.94901 11.36 4.74301 11.565 4.74301 11.816C4.74301 12.069 4.94801 12.272 5.20001 12.272H9.53601C9.55901 12.272 10.435 12.292 11.034 12.145C11.346 12.068 11.584 12.008 11.584 12.008C11.664 11.99 11.739 11.949 11.796 11.89L15.259 8.447V15.929H15.258ZM11.241 11.156L10.163 11.423L10.43 10.347L16.527 4.256L17.335 5.064L11.241 11.156Z\" fill=\"#fff\"/></svg>\r\n)\r\n\r\nconst MicSVGOff = ({ mediaData, setMediaData }) => <svg className=\"svg micoff\" onClick={() => changeMode(mediaData, setMediaData, \"audio\")} aria-hidden=\"false\" viewBox=\"0 0 24 24\"><path d=\"M6.7 11H5C5 12.19 5.34 13.3 5.9 14.28L7.13 13.05C6.86 12.43 6.7 11.74 6.7 11Z\" fill=\"currentColor\"></path><path d=\"M9.01 11.085C9.015 11.1125 9.02 11.14 9.02 11.17L15 5.18V5C15 3.34 13.66 2 12 2C10.34 2 9 3.34 9 5V11C9 11.03 9.005 11.0575 9.01 11.085Z\" fill=\"currentColor\"></path><path d=\"M11.7237 16.0927L10.9632 16.8531L10.2533 17.5688C10.4978 17.633 10.747 17.6839 11 17.72V22H13V17.72C16.28 17.23 19 14.41 19 11H17.3C17.3 14 14.76 16.1 12 16.1C11.9076 16.1 11.8155 16.0975 11.7237 16.0927Z\" fill=\"currentColor\"></path><path d=\"M21 4.27L19.73 3L3 19.73L4.27 21L8.46 16.82L9.69 15.58L11.35 13.92L14.99 10.28L21 4.27Z\" class=\"strikethrough-2Kl6HF\" fill=\"currentColor\"></path></svg>\r\nconst MicSVGOn = ({ mediaData, setMediaData }) => <svg className=\"svg micon\" onClick={() => changeMode(mediaData, setMediaData, \"audio\")} aria-hidden=\"false\" viewBox=\"0 0 24 24\"><path d=\"M14.99 11C14.99 12.66 13.66 14 12 14C10.34 14 9 12.66 9 11V5C9 3.34 10.34 2 12 2C13.66 2 15 3.34 15 5L14.99 11ZM12 16.1C14.76 16.1 17.3 14 17.3 11H19C19 14.42 16.28 17.24 13 17.72V21H11V17.72C7.72 17.23 5 14.41 5 11H6.7C6.7 14 9.24 16.1 12 16.1ZM12 4C11.2 4 11 4.66667 11 5V11C11 11.3333 11.2 12 12 12C12.8 12 13 11.3333 13 11V5C13 4.66667 12.8 4 12 4Z\" fill=\"currentColor\"></path><path d=\"M14.99 11C14.99 12.66 13.66 14 12 14C10.34 14 9 12.66 9 11V5C9 3.34 10.34 2 12 2C13.66 2 15 3.34 15 5L14.99 11ZM12 16.1C14.76 16.1 17.3 14 17.3 11H19C19 14.42 16.28 17.24 13 17.72V22H11V17.72C7.72 17.23 5 14.41 5 11H6.7C6.7 14 9.24 16.1 12 16.1Z\" fill=\"currentColor\"></path></svg>\r\n\r\nconst CamSVGOff = ({ mediaData, setMediaData }) => <img className=\"svg camoff\" onClick={() => changeMode(mediaData, setMediaData, \"video\")} src={require(\"./camOff.svg\")} />\r\nconst CamSVGOn = ({ mediaData, setMediaData }) => <svg className=\"svg camon\" onClick={() => changeMode(mediaData, setMediaData, \"video\")} aria-hidden=\"false\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M21.526 8.149C21.231 7.966 20.862 7.951 20.553 8.105L18 9.382V7C18 5.897 17.103 5 16 5H4C2.897 5 2 5.897 2 7V17C2 18.104 2.897 19 4 19H16C17.103 19 18 18.104 18 17V14.618L20.553 15.894C20.694 15.965 20.847 16 21 16C21.183 16 21.365 15.949 21.526 15.851C21.82 15.668 22 15.347 22 15V9C22 8.653 21.82 8.332 21.526 8.149Z\"></path></svg>\r\n\r\nconst ScreenShareOff = ({ mediaData, setMediaData }) => <></>\r\nconst ScreenShareOn = ({ mediaData, setMediaData }) => <svg className=\"svg screenon\" onClick={() => changeMode(mediaData, setMediaData, \"screen\")} viewBox=\"0 0 24 24\"><path d=\"M20 18c1.1 0 1.99-.9 1.99-2L22 6c0-1.11-.9-2-2-2H4c-1.11 0-2 .89-2 2v10c0 1.1.89 2 2 2H0v2h24v-2h-4zM4 16V6h16v10.01L4 16zm9-6.87c-3.89.54-5.44 3.2-6 5.87 1.39-1.87 3.22-2.72 6-2.72v2.19l4-3.74L13 7v2.13z\"/></svg>\r\n\r\n// const FullScreen = () => <img className=\"svg fullscreen\" onClick={() => changeMode()} src={require('./fullScreen.svg')} /> // <FullScreen0 />\r\n\r\nexport {\r\n    EditSVG,\r\n\r\n    MicSVGOff,\r\n    MicSVGOn,\r\n\r\n    CamSVGOff,\r\n    CamSVGOn,\r\n\r\n    ScreenShareOff,\r\n    ScreenShareOn,\r\n\r\n    // FullScreen\r\n};","/home/giorgir/Desktop/web projects/discord-mern/client/src/components/Voice/_voice.js",["87","88","89","90","91","92","93","94","95","96","97","98"],[],"import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport { socket } from '../js/_socketSide';\r\n\r\nimport Peer from 'simple-peer';\r\n\r\nimport { MicSVGOff, MicSVGOn, CamSVGOff, CamSVGOn, ScreenShareOff, ScreenShareOn, FullScreen } from '../../styles/SVGs/_SVGs';\r\n\r\nimport \"./_voice.sass\";\r\n\r\nconst egress = (history) => {\r\n    history.push(\"/chat/61ed960432479c682956802b\");\r\n}\r\n\r\nconst Frame = ({ name, status, videoStream }) => (\r\n    <div className=\"frame\">\r\n        <h4 className=\"name\">{name}:</h4>\r\n        {/* style={{height: 150, width: 100}} */}\r\n        <video className=\"video\" autoPlay controls ref={videoStream} />\r\n        <h4 className=\"statusLabel\">{status}</h4>\r\n    </div>\r\n)\r\n\r\nconst VoiceFrame = ({ history, roomId, userName }) => {\r\n    const setLabel = (user, text) => {\r\n        if (user === \"current\"){\r\n            let newUsers = users;\r\n            newUsers[0][1] = text;\r\n            setUsers([...newUsers]);\r\n        }\r\n        else {\r\n            //pass\r\n        }\r\n    }\r\n\r\n    const [mediaStream, setMediaStream] = useState();\r\n\r\n    const [users, setUsers] = useState([]);\r\n\r\n    const videoStreams = [useRef(), useRef()]; // [0] is of current device\r\n\r\n    const [mediaData, setMediaData] = useState({ audio: false, video: true });\r\n\r\n    useEffect(() => {\r\n        setUsers([[userName, \"\"]]);\r\n        // socket.emit(\"join voice\", {\r\n        //     roomId: roomId,\r\n        //     username: username,\r\n        // });\r\n        \r\n        socket.on(\"all users\", data => {\r\n            // pass\r\n        });\r\n\r\n        socket.on(\"user joined\", data => {\r\n            // pass\r\n        });\r\n\r\n        socket.on(\"new stream\", data => {\r\n            // pass\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia(mediaData)\r\n        .then(stream => {\r\n            // console.log(stream);\r\n            setMediaStream(stream);\r\n            videoStreams[0].current.srcObject = stream;\r\n\r\n            // Todo: set media label to \"No Video\"\r\n            if (!mediaData.video)\r\n                setLabel(\"current\", \"No Video\");\r\n            else\r\n                setLabel(\"current\", \"\");\r\n        })\r\n        .catch(err => {\r\n            try {\r\n                mediaStream.getTracks().forEach(track => track.stop());\r\n                // Todo: set media label to \"No Signal\"\r\n                setLabel(\"current\", \"No Signal\");\r\n            }\r\n            catch (TypeError){\r\n                // setLabel(\"current\", \"no video\");\r\n                // console.log(\"no shit...\");\r\n            }\r\n        });\r\n    }, [mediaData]);\r\n\r\n    useEffect(() => {\r\n        console.log(\".......\")\r\n    }, [users]);\r\n\r\n    return(\r\n        <div className=\"webrtc\">\r\n            <div className=\"windows\">\r\n                {users.map((user, n) => <Frame name={user[0]} status={user[1]} videoStream={videoStreams[n]} />)}\r\n            </div>\r\n\r\n            <div className=\"bottom\">\r\n                <div className=\"icons\">\r\n                    {mediaData.audio ?\r\n                    <MicSVGOn mediaData={mediaData} setMediaData={setMediaData} />\r\n                    :\r\n                    <MicSVGOff mediaData={mediaData} setMediaData={setMediaData} />\r\n                    }\r\n                    {mediaData.video ?\r\n                    <CamSVGOn mediaData={mediaData} setMediaData={setMediaData} />\r\n                    :\r\n                    <CamSVGOff mediaData={mediaData} setMediaData={setMediaData} />\r\n                    }\r\n                    \r\n                    <ScreenShareOn mediaData={mediaData} setMediaData={setMediaData} />\r\n                </div>\r\n                <button className=\"egress\" onClick={() => egress(history)}>egress</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst screenShareOn = () => {\r\n    // pass\r\n}\r\n\r\nconst screenShareOff = () => {\r\n    // pass\r\n}\r\n\r\nconst webCamOn = () => {\r\n    // pass\r\n}\r\n\r\nconst webCamOff = () => {\r\n    // pass\r\n}\r\n\r\nconst micOn = () => {\r\n    // pass\r\n}\r\n\r\nconst micOff = () => {\r\n    // pass\r\n}\r\n\r\nconst checkMode = (voiceMode, setStatusLabel) => {\r\n    if (!voiceMode)\r\n        setStatusLabel(\"invalid\");\r\n}\r\n\r\nexport {\r\n    VoiceFrame,\r\n}",{"ruleId":"99","severity":1,"message":"100","line":43,"column":8,"nodeType":"101","endLine":43,"endColumn":10,"suggestions":"102"},{"ruleId":"99","severity":1,"message":"103","line":41,"column":8,"nodeType":"101","endLine":41,"endColumn":10,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":1,"column":38,"nodeType":"107","messageId":"108","endLine":1,"endColumn":48},{"ruleId":"105","severity":1,"message":"109","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":16},{"ruleId":"105","severity":1,"message":"110","line":8,"column":19,"nodeType":"107","messageId":"108","endLine":8,"endColumn":28},{"ruleId":"105","severity":1,"message":"111","line":8,"column":30,"nodeType":"107","messageId":"108","endLine":8,"endColumn":38},{"ruleId":"105","severity":1,"message":"112","line":8,"column":40,"nodeType":"107","messageId":"108","endLine":8,"endColumn":49},{"ruleId":"105","severity":1,"message":"113","line":8,"column":51,"nodeType":"107","messageId":"108","endLine":8,"endColumn":59},{"ruleId":"105","severity":1,"message":"114","line":8,"column":61,"nodeType":"107","messageId":"108","endLine":8,"endColumn":75},{"ruleId":"105","severity":1,"message":"115","line":8,"column":77,"nodeType":"107","messageId":"108","endLine":8,"endColumn":90},{"ruleId":"105","severity":1,"message":"116","line":10,"column":10,"nodeType":"107","messageId":"108","endLine":10,"endColumn":20},{"ruleId":"117","severity":1,"message":"118","line":26,"column":31,"nodeType":"119","messageId":"120","endLine":26,"endColumn":33},{"ruleId":"99","severity":1,"message":"121","line":115,"column":12,"nodeType":"101","endLine":115,"endColumn":26,"suggestions":"122"},{"ruleId":"105","severity":1,"message":"123","line":164,"column":11,"nodeType":"107","messageId":"108","endLine":164,"endColumn":18},{"ruleId":"105","severity":1,"message":"124","line":168,"column":11,"nodeType":"107","messageId":"108","endLine":168,"endColumn":23},{"ruleId":"99","severity":1,"message":"125","line":208,"column":8,"nodeType":"101","endLine":208,"endColumn":10,"suggestions":"126"},{"ruleId":"99","severity":1,"message":"127","line":213,"column":8,"nodeType":"101","endLine":213,"endColumn":18,"suggestions":"128"},{"ruleId":"99","severity":1,"message":"129","line":217,"column":8,"nodeType":"101","endLine":217,"endColumn":17,"suggestions":"130"},{"ruleId":"99","severity":1,"message":"131","line":230,"column":8,"nodeType":"101","endLine":230,"endColumn":16,"suggestions":"132"},{"ruleId":"99","severity":1,"message":"133","line":238,"column":8,"nodeType":"101","endLine":238,"endColumn":17,"suggestions":"134"},{"ruleId":"117","severity":1,"message":"118","line":57,"column":17,"nodeType":"119","messageId":"120","endLine":57,"endColumn":19},{"ruleId":"105","severity":1,"message":"135","line":57,"column":7,"nodeType":"107","messageId":"108","endLine":57,"endColumn":13},{"ruleId":"136","severity":1,"message":"137","line":29,"column":52,"nodeType":"138","endLine":29,"endColumn":173},{"ruleId":"105","severity":1,"message":"139","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":12},{"ruleId":"105","severity":1,"message":"114","line":7,"column":52,"nodeType":"107","messageId":"108","endLine":7,"endColumn":66},{"ruleId":"105","severity":1,"message":"140","line":7,"column":83,"nodeType":"107","messageId":"108","endLine":7,"endColumn":93},{"ruleId":"99","severity":1,"message":"141","line":62,"column":8,"nodeType":"101","endLine":62,"endColumn":10,"suggestions":"142"},{"ruleId":"99","severity":1,"message":"143","line":88,"column":8,"nodeType":"101","endLine":88,"endColumn":19,"suggestions":"144"},{"ruleId":"105","severity":1,"message":"145","line":121,"column":7,"nodeType":"107","messageId":"108","endLine":121,"endColumn":20},{"ruleId":"105","severity":1,"message":"146","line":125,"column":7,"nodeType":"107","messageId":"108","endLine":125,"endColumn":21},{"ruleId":"105","severity":1,"message":"147","line":129,"column":7,"nodeType":"107","messageId":"108","endLine":129,"endColumn":15},{"ruleId":"105","severity":1,"message":"148","line":133,"column":7,"nodeType":"107","messageId":"108","endLine":133,"endColumn":16},{"ruleId":"105","severity":1,"message":"149","line":137,"column":7,"nodeType":"107","messageId":"108","endLine":137,"endColumn":12},{"ruleId":"105","severity":1,"message":"150","line":141,"column":7,"nodeType":"107","messageId":"108","endLine":141,"endColumn":13},{"ruleId":"105","severity":1,"message":"151","line":145,"column":7,"nodeType":"107","messageId":"108","endLine":145,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'queryParams'. Either include them or remove the dependency array.","ArrayExpression",["152"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["153"],"no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'FormData' is defined but never used.","'MicSVGOff' is defined but never used.","'MicSVGOn' is defined but never used.","'CamSVGOff' is defined but never used.","'CamSVGOn' is defined but never used.","'ScreenShareOff' is defined but never used.","'ScreenShareOn' is defined but never used.","'appendFile' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'sendFile'. Either include it or remove the dependency array.",["154"],"'reducer' is assigned a value but never used.","'initialState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'roomId'. Either include them or remove the dependency array.",["155"],"React Hook useEffect has a missing dependency: 'category'. Either include it or remove the dependency array.",["156"],"React Hook useEffect has a missing dependency: 'elements'. Either include it or remove the dependency array. You can also do a functional update 'setElements(e => ...)' if you only need 'elements' in the 'setElements' call.",["157"],"React Hook useEffect has missing dependencies: 'offlineList' and 'onlineList'. Either include them or remove the dependency array. You can also do a functional update 'setOnlineList(o => ...)' if you only need 'onlineList' in the 'setOnlineList' call.",["158"],"React Hook useEffect has missing dependencies: 'offlineList' and 'onlineList'. Either include them or remove the dependency array. You can also do a functional update 'setOfflineList(o => ...)' if you only need 'offlineList' in the 'setOfflineList' call.",["159"],"'urlify' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Peer' is defined but never used.","'FullScreen' is defined but never used.","React Hook useEffect has a missing dependency: 'userName'. Either include it or remove the dependency array. If 'setUsers' needs the current value of 'userName', you can also switch to useReducer instead of useState and read 'userName' in the reducer.",["160"],"React Hook useEffect has missing dependencies: 'mediaStream', 'setLabel', and 'videoStreams'. Either include them or remove the dependency array.",["161"],"'screenShareOn' is assigned a value but never used.","'screenShareOff' is assigned a value but never used.","'webCamOn' is assigned a value but never used.","'webCamOff' is assigned a value but never used.","'micOn' is assigned a value but never used.","'micOff' is assigned a value but never used.","'checkMode' is assigned a value but never used.",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},"Update the dependencies array to be: [history, queryParams]",{"range":"182","text":"183"},"Update the dependencies array to be: [history]",{"range":"184","text":"185"},"Update the dependencies array to be: [selectedFile, sendFile]",{"range":"186","text":"187"},"Update the dependencies array to be: [history, roomId]",{"range":"188","text":"189"},"Update the dependencies array to be: [category, userName]",{"range":"190","text":"191"},"Update the dependencies array to be: [element, elements]",{"range":"192","text":"193"},"Update the dependencies array to be: [offlineList, online, onlineList]",{"range":"194","text":"195"},"Update the dependencies array to be: [offline, offlineList, onlineList]",{"range":"196","text":"197"},"Update the dependencies array to be: [userName]",{"range":"198","text":"199"},"Update the dependencies array to be: [mediaData, mediaStream, setLabel, videoStreams]",{"range":"200","text":"201"},[1228,1230],"[history, queryParams]",[1099,1101],"[history]",[4021,4035],"[selectedFile, sendFile]",[7236,7238],"[history, roomId]",[7384,7394],"[category, userName]",[7476,7485],"[element, elements]",[7880,7888],"[offlineList, online, onlineList]",[8149,8158],"[offline, offlineList, onlineList]",[1714,1716],"[userName]",[2577,2588],"[mediaData, mediaStream, setLabel, videoStreams]"]